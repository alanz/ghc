\begin{code}
{-# LANGUAGE CPP, KindSignatures #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE RoleAnnotations #-}

module HsExpr where

import SrcLoc     ( Located )
import Outputable ( SDoc, OutputableBndr, Outputable )
import {-# SOURCE #-} HsPat  ( LPat )
import {-# SOURCE #-} HsLit  ( PostTcType )

import Data.Data

type role HsExpr nominal
data HsExpr (id :: *)

type role HsCmd nominal
data HsCmd  (id :: *)

type role HsSplice nominal
data HsSplice (id :: *)

type role MatchGroup nominal representational
data MatchGroup (id :: *) (body :: *)

type role GRHSs nominal representational
data GRHSs (id :: *) (body :: *)

#if __GLASGOW_HASKELL__ > 706
instance Typeable HsSplice
instance Typeable HsExpr
instance Typeable MatchGroup
instance Typeable GRHSs
#else
instance Typeable1 HsSplice
instance Typeable1 HsExpr
instance Typeable1 HsCmd
instance Typeable2 MatchGroup
instance Typeable2 GRHSs
#endif


instance (Data (PostTcType i), Data i) => Data (HsSplice i)
instance (Data (PostTcType i), Data i) => Data (HsExpr i)
instance (Data (PostTcType i), Data i) => Data (HsCmd i)
instance (Data (PostTcType i), Data i, Data (PostTcType body), Data body) => Data (MatchGroup i body)
instance (Data (PostTcType i), Data i, Data (PostTcType body), Data body) => Data (GRHSs i body)


instance OutputableBndr id => Outputable (HsExpr id)
instance OutputableBndr id => Outputable (HsCmd id)

type LHsExpr id = Located (HsExpr id)
type SyntaxExpr id = HsExpr id

pprLExpr :: (OutputableBndr i) => 
        LHsExpr i -> SDoc

pprExpr :: (OutputableBndr i) => 
        HsExpr i -> SDoc

pprUntypedSplice :: (OutputableBndr i) => 
                    HsSplice i -> SDoc

pprPatBind :: (OutputableBndr bndr, OutputableBndr id, Outputable body)
           => LPat bndr -> GRHSs id body -> SDoc

pprFunBind :: (OutputableBndr idL, OutputableBndr idR, Outputable body) 
           => idL -> Bool -> MatchGroup idR body -> SDoc
\end{code}
