\begin{code}
{-# LANGUAGE CPP, KindSignatures #-}
{-# LANGUAGE CPP, RankNTypes #-}
#if __GLASGOW_HASKELL__ > 706
{-# LANGUAGE CPP, RoleAnnotations #-}
#endif
module HsExpr where

import SrcLoc     ( Located )
import Outputable ( SDoc, OutputableBndr, Outputable )
import {-# SOURCE #-} HsPat  ( LPat )

import Data.Data

data HsExpr (i :: *) (ptt :: *)
data HsCmd  (i :: *) (ptt :: *)
data HsSplice (i :: *) (ptt :: *)
data MatchGroup (a :: *) (body :: *) (ptt :: *)
data GRHSs (a :: *) (body :: *) (ptt :: *)

#if __GLASGOW_HASKELL__ > 706
instance Typeable HsSplice
instance Typeable HsExpr
instance Typeable MatchGroup
instance Typeable GRHSs
#else
instance Typeable2 HsSplice
instance Typeable2 HsExpr
instance Typeable2 HsCmd
instance Typeable3 MatchGroup
instance Typeable3 GRHSs
#endif

instance (Data i, Data p) => Data (HsSplice i p)
instance (Data i, Data p) => Data (HsExpr i p)
instance (Data i, Data p) => Data (HsCmd i p)
instance (Data i, Data body, Data p) => Data (MatchGroup i body p)
instance (Data i, Data body, Data p) => Data (GRHSs i body p)

instance OutputableBndr id => Outputable (HsExpr id p)
instance OutputableBndr id => Outputable (HsCmd id p)

#if __GLASGOW_HASKELL__ > 706
type role HsExpr representational nominal
type role HsCmd representational nominal
type role MatchGroup representational representational nominal
type role GRHSs representational representational nominal
type role HsSplice representational nominal
#endif
type LHsExpr a p = Located (HsExpr a p)
type SyntaxExpr a p = HsExpr a p

pprLExpr :: (OutputableBndr i) => 
        LHsExpr i p -> SDoc

pprExpr :: (OutputableBndr i) => 
        HsExpr i p -> SDoc

pprUntypedSplice :: (OutputableBndr i) => 
                    HsSplice i p -> SDoc

pprPatBind :: forall bndr id body pttL pttR. (OutputableBndr bndr, OutputableBndr id, Outputable body)
           => LPat bndr pttL -> GRHSs id body pttR -> SDoc

pprFunBind :: (OutputableBndr idL, OutputableBndr idR, Outputable body) 
           => idL -> Bool -> MatchGroup idR body ptt -> SDoc
\end{code}
