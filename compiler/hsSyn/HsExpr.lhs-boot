\begin{code}
{-# LANGUAGE CPP, KindSignatures #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE UndecidableInstances #-} -- Note [Pass sensitive types]
                                      -- in module PlaceHolder
{-# LANGUAGE ConstraintKinds #-}
#if __GLASGOW_HASKELL__ > 706
{-# LANGUAGE RoleAnnotations #-}
#endif

module HsExpr where

import SrcLoc     ( GenLocated )
import Outputable ( SDoc, OutputableBndr, Outputable )
import {-# SOURCE #-} HsPat  ( LPat )
import PlaceHolder ( DataId )
import Data.Data hiding ( Fixity )

#if __GLASGOW_HASKELL__ > 706
type role HsExpr nominal nominal
type role HsCmd nominal nominal
type role MatchGroup nominal nominal representational
type role GRHSs nominal nominal representational
type role HsSplice nominal
#endif
data HsExpr (l :: *) (i :: *)
data HsCmd  (l :: *) (i :: *)
data HsSplice (i :: *)
data MatchGroup (l :: *) (a :: *) (body :: *)
data GRHSs (l :: *) (a :: *) (body :: *)

#if __GLASGOW_HASKELL__ > 706
instance Typeable HsSplice
instance Typeable HsExpr
instance Typeable MatchGroup
instance Typeable GRHSs
#else
instance Typeable1 HsSplice
instance Typeable1 HsExpr
instance Typeable1 HsCmd
instance Typeable2 MatchGroup
instance Typeable2 GRHSs
#endif

instance (DataId id) => Data (HsSplice id)
instance (DataId id, Data l) => Data (HsExpr l id)
instance (DataId id, Data l) => Data (HsCmd l id)
instance (Data body,DataId id, Data l) => Data (MatchGroup l id body)
instance (Data body,DataId id, Data l) => Data (GRHSs l id body)

instance (OutputableBndr id, Outputable l) => Outputable (HsExpr l id)
instance (OutputableBndr id, Outputable l) => Outputable (HsCmd l id)

type LHsExpr l a = GenLocated l (HsExpr l a)
type SyntaxExpr l a = HsExpr l a

pprLExpr :: (OutputableBndr i, Outputable l) =>
        LHsExpr l i -> SDoc

pprExpr :: (OutputableBndr i, Outputable l) =>
        HsExpr l i -> SDoc

pprUntypedSplice :: (OutputableBndr i) => 
                    HsSplice i -> SDoc

pprPatBind :: (OutputableBndr bndr, OutputableBndr id, Outputable body,
               Outputable l)
           => LPat l bndr -> GRHSs l id body -> SDoc

pprFunBind :: (OutputableBndr idL, OutputableBndr idR, Outputable body,
               Outputable l)
           => idL -> Bool -> MatchGroup l idR body -> SDoc
\end{code}
